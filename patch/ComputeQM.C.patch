--- ComputeQM.C.ORIG	2017-02-23 14:14:49.058687030 -0600
+++ ComputeQM.C	2017-03-07 13:42:19.872725140 -0600
@@ -1788,8 +1788,8 @@
     const int *const *const chargeTarget = molPtr->get_qmMMChargeTarget() ;
     const int *const numTargs = molPtr->get_qmMMNumTargs() ;
     
-    BigReal constants = COULOMB*simParams->nonbondedScaling/(simParams->dielectric*4.0*PI) ;
-//     BigReal constants = COULOMB*simParams->nonbondedScaling/(simParams->dielectric) ;
+//    BigReal constants = COULOMB*simParams->nonbondedScaling/(simParams->dielectric*4.0*PI) ;
+     BigReal constants = COULOMB*simParams->nonbondedScaling/(simParams->dielectric) ;
     
     if ( qmPCFreq > 0 ) {
         DebugM(4,"Using point charge stride of " << qmPCFreq << "\n")
@@ -4111,14 +4111,12 @@
     outputFileName = inputFileName ;
     outputFileName.append(".result") ;
     
-    int numPntChrgs = 0;
     QMAtomData *pcP = msg->data + msg->numAllAtoms ;
-    for (int i=0; i<msg->numAllPntChrgs; i++ ) {
-        if (pcP[i].type != QMPCTYPE_IGNORE)
-            numPntChrgs++;
-    }
-    
-    iret = fprintf(inputFile,"%d %d\n",msg->numAllAtoms, numPntChrgs);
+
+    int stepNum = qmCoordMsgs[0]->timestep - simParams->firstTimestep;
+    int numSteps = simParams->N - simParams->firstTimestep;
+
+    iret = fprintf(inputFile,"%d %d %d %d\n",msg->numAllAtoms,msg->numAllPntChrgs,stepNum,numSteps);
     if ( iret < 0 ) { NAMD_die(strerror(errno)); }
     
     DebugM(4, "Writing " << msg->numAllAtoms << " QM atom coords in file " << 
@@ -4129,12 +4127,15 @@
     QMAtomData *atmP = msg->data ;
     for (size_t i=0; i<msg->numAllAtoms; ++i, ++atmP ) {
         
+        double charge = atmP->charge;
+        int id = atmP->id;
+
         double x = atmP->position.x;
         double y = atmP->position.y;
         double z = atmP->position.z;
         
-        iret = fprintf(inputFile,"%f %f %f %s\n",
-                       x,y,z,atmP->element);
+        iret = fprintf(inputFile,"%f %f %f %s %f %d\n",
+                       x,y,z,atmP->element,charge,id);
         if ( iret < 0 ) { NAMD_die(strerror(errno)); }
         
     }
@@ -4143,17 +4144,19 @@
     pcP = msg->data + msg->numAllAtoms ;
     for ( size_t j=0; j < msg->numAllPntChrgs; j++, ++pcP) {
         
-        if (pcP->type == QMPCTYPE_IGNORE)
-                continue;
-        
         double charge = pcP->charge;
+        if (pcP->type == QMPCTYPE_IGNORE) {
+            charge = 0.0;
+        }
+        
+        int id = pcP->id;
         
         double x = pcP->position.x;
         double y = pcP->position.y;
         double z = pcP->position.z;
         
-        iret = fprintf(inputFile,"%f %f %f %f\n",
-                       x,y,z,charge);
+        iret = fprintf(inputFile,"%f %f %f %f %d\n",
+                       x,y,z,charge,id);
         if ( iret < 0 ) { NAMD_die(strerror(errno)); }
     }
     
@@ -4306,37 +4309,40 @@
             Force mmForce(0), qmForce(0), 
                 linkForce(localForce[0], localForce[1], localForce[2]);
             
-            Vector base = (linkDist/(mmqmDist*mmqmDist*mmqmDist))*dir;
-            // Unit vectors
-            Vector xuv(1,0,0), yuv(0,1,0), zuv(0,0,1);
-            Real xDelta = pcP[mmInd].position.x - atmP[qmInd].position.x;
-            Real yDelta = pcP[mmInd].position.y - atmP[qmInd].position.y;
-            Real zDelta = pcP[mmInd].position.z - atmP[qmInd].position.z;
-            
-            qmForce += (linkForce*((1 - linkDist/mmqmDist)*xuv + 
-                        (xDelta)*base) )*xuv;
-            
-            qmForce += (linkForce*((1 - linkDist/mmqmDist)*yuv + 
-                        (yDelta)*base) )*yuv;
-            
-            qmForce += (linkForce*((1 - linkDist/mmqmDist)*zuv + 
-                        (zDelta)*base) )*zuv;
-            
-            
-            mmForce += (linkForce*((linkDist/mmqmDist)*xuv -
-                        (xDelta)*base) )*xuv;
-            
-            mmForce += (linkForce*((linkDist/mmqmDist)*yuv -
-                        (yDelta)*base) )*yuv;
-            
-            mmForce += (linkForce*((linkDist/mmqmDist)*zuv -
-                        (zDelta)*base) )*zuv;
+            Real prod = (linkForce * dir) * linkDist / (mmqmDist*mmqmDist*mmqmDist);
+
+            qmForce += (1 - linkDist/mmqmDist) * linkForce + prod * dir;
+            mmForce += linkDist/mmqmDist * linkForce - prod * dir;
             
             resForce[qmInd].force += qmForce;
             resForce[msg->numQMAtoms + mmInd].force += mmForce;
         }
     }
     
+    DebugM(4, "Applying forces on " << msg->numRealPntChrgs << " point charges" << std::endl) ;
+
+    // The initial point charge index for the force message is the number of QM
+    // atoms, since the dummy atoms have no representation in NAMD
+    int pcIndx = msg->numQMAtoms;
+    
+    // Reads the data form the output file created by the QM software.
+    // Gradients over the MM atoms will be read.
+    
+    for (size_t i=0; i < msg->numRealPntChrgs; i++, pcIndx++) {
+        
+        iret = fscanf(outputFile,"%lf %lf %lf\n", 
+                      localForce+0,
+                      localForce+1,
+                      localForce+2);
+        if ( iret != 3 ) {
+            NAMD_die("Error reading MM gradient from QM results file.");
+        }
+        
+        resForce[pcIndx].force.x += localForce[0];
+        resForce[pcIndx].force.y += localForce[1];
+        resForce[pcIndx].force.z += localForce[2];
+    }
+
     fclose(outputFile);
     
     // In case charges are not to be read form the QM software output,
@@ -4366,63 +4372,14 @@
     }
     
     // remove force file
-//     DebugM(4, "Removing output file: " << outputFileName << std::endl) ;
-//     iret = remove(outputFileName);
-//     if ( iret ) { NAMD_die(strerror(errno)); }
-    
-    
-    DebugM(4, "Applying forces on " << msg->numRealPntChrgs << " point charges" << std::endl) ;
-    
+    DebugM(4, "Removing output file: " << outputFileName.c_str() << std::endl) ;
+    iret = remove(outputFileName.c_str());
+    if ( iret ) { NAMD_die(strerror(errno)); }
+   
+    // Resets the pointers.
     atmP = msg->data ;
     pcP = msg->data + msg->numAllAtoms ;
     
-    // The initial point charge index for the force message is the number of QM
-    // atoms, since the dummy atoms have no representation in NAMD
-    int pcIndx = msg->numQMAtoms;
-    
-    // We only loop over point charges from real atoms, ignoring the ones 
-    // created to handle QM-MM bonds.
-    for (size_t i=0; i < msg->numRealPntChrgs; i++, pcIndx++ ) {
-        
-        BigReal Force = 0;
-        
-        BigReal pntCharge = pcP[i].charge;
-        
-        BigReal xMM = pcP[i].position.x;
-        BigReal yMM = pcP[i].position.y;
-        BigReal zMM = pcP[i].position.z;
-        
-        for (size_t j=0; j<msg->numQMAtoms; ++j ) {
-            
-            // Not perfect
-            // This prevents the MM point charge of a MM-QM bond from feeling 
-            // the influence from the QM atom it is bount to. 
-            if ( pcP[i].bountToIndx == j ) continue ;
-            
-            BigReal qmCharge = atmP[j].charge ;
-            
-            Force = pntCharge*qmCharge*constants ;
-            
-            BigReal xQM = atmP[j].position.x;
-            BigReal yQM = atmP[j].position.y;
-            BigReal zQM = atmP[j].position.z;
-            
-            BigReal x_ij = (xMM - xQM);
-            BigReal y_ij = (yMM - yQM);
-            BigReal z_ij = (zMM - zQM);
-            
-            BigReal r2 = (x_ij*x_ij + y_ij*y_ij + z_ij*z_ij);
-            BigReal rNorm = sqrt(r2) ;
-            
-            Force /= r2;
-            
-            resForce[pcIndx].force.x += Force*x_ij/rNorm;
-            resForce[pcIndx].force.y += Force*y_ij/rNorm;
-            resForce[pcIndx].force.z += Force*z_ij/rNorm;
-        }
-        
-    }
-    
     // Adjusts forces from PME, canceling contributions from the QM and 
     // direct Coulomb forces calculated here.
     if (msg->PMEOn) {
@@ -4438,6 +4395,8 @@
             BigReal p_i_charge = atmP[i].charge ;
             Position pos_i = atmP[i].position ;
             
+            const BigReal kq_i = p_i_charge * constants;
+
             for (size_t j=i+1; j < msg->numQMAtoms; j++) {
                 
                 BigReal p_j_charge = atmP[j].charge ;
@@ -4454,9 +4413,7 @@
 //                 BigReal recip_energy = (1-tmp_b)/r = erf(tmp_a)/r;
                 BigReal recip_energy = (1-tmp_b)/r;
                 
-                BigReal recip_gradient = -(1-corr_gradient)/(r*2);
-                
-                const BigReal kq_i = p_i_charge * constants;
+                BigReal recip_gradient = -(1-corr_gradient)/(r*r);
                 
                 // Final force and energy correction for this pair of atoms.
                 BigReal energy = kq_i * p_j_charge * recip_energy ;
@@ -4489,8 +4446,6 @@
             
             const BigReal kq_i = p_i_charge * constants;
             
-            Force fixForce = 0;
-            
             for (size_t j=0; j<msg->numQMAtoms; ++j ) {
                 
                 // Not perfect
@@ -4512,24 +4467,28 @@
 //                 BigReal recip_energy = (1-tmp_b)/r = erf(tmp_a)/r;
                 BigReal recip_energy = (1-tmp_b)/r;
                 
-                BigReal recip_gradient = -(1-corr_gradient)/(r*2);
+                BigReal recip_gradient = -(1-corr_gradient)/(r*r);
                 
                 // Final force and energy correction for this pair of atoms.
                 BigReal energy = kq_i * p_j_charge * recip_energy ;
                 
-                fixForce += -1*p_j_charge*(recip_gradient/r)*(pos_i - pos_j) ;
+                Force fixForce = -1*kq_i*p_j_charge*(recip_gradient/r)*(pos_i - pos_j) ;
+                
+                // The force is *subtracted* from the total force acting on
+                // both atoms. The sign on fixForce corrects the orientation
+                // of the subtracted force.
+//                 DebugM(4,"Old forces for PC " << pcIndx << ": " << resForce[pcIndx].force
+//                     << std::endl);
+//                 DebugM(4,"Old forces for QM " << j << ": " << resForce[j].force
+//                     << std::endl);
+//                 DebugM(4,"Force correction: " << fixForce << std::endl);
+                resForce[pcIndx].force -= fixForce ;
+                resForce[j].force -= -1*fixForce;
                 
                 // The energy is *subtracted* from the total energy calculated here.
                 resMsg->energyCorr -= energy;
-                
             }
             
-            // The force is *subtracted* from the total force acting on
-                // the point charge.
-//                 DebugM(4,"Old forces for PC " << pcIndx << ": " << resForce[pcIndx].force
-//                     << std::endl);
-//                 DebugM(4,"Force correction: " << fixForce << std::endl);
-            resForce[pcIndx].force -= kq_i*fixForce ;
         }
         
     }
