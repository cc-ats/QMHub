diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/qm2_dftb_scf.F90 sqm/qm2_dftb_scf.F90
--- sqm-orig/qm2_dftb_scf.F90	2017-07-14 16:11:14.323724144 -0500
+++ sqm/qm2_dftb_scf.F90	2017-07-19 15:21:45.111495621 -0500
@@ -433,6 +433,9 @@
             call qm2_dftb_gb_shift(scf_mchg)
           end if
         end if
+
+        ! Add atom site potentials
+        call qm2_dftb_aspot_shift(qmmm_struct%aspot)
   
         ! FINAL HAMILTONIAN
         ! -----------------
@@ -622,6 +625,11 @@
            eext = eext + ks_struct%shiftE(i)*(mcharge%qzero( izp_str%izp(i))-qmat(i))
         end do
 
+        ! ATOM SITE POTENTIAL ENERGY
+        do i= 1, qmmm_struct%nquant_nlink
+           eext = eext + qmmm_struct%aspot(i)*(mcharge%qzero( izp_str%izp(i))-qmat(i))
+        end do
+
         ! Third order energy
         ethird=0.0d0
         if (dftb_3rd_order_str%do_3rd_order) then
@@ -978,5 +986,25 @@
 
 !end subroutine outeigenvectors
 
+subroutine qm2_dftb_aspot_shift(aspot)
+
+!! Modules
+   use qmmm_module, only: qmmm_struct
+   use qm2_dftb_module, only: ks_struct
+
+   implicit none
+
+!! Passed in
+   _REAL_, intent(in) :: aspot(*) !Potential at each QM atom
+
+!! Locals
+   integer :: i
 
+! Puts the Ewald potential into Shift.
+! The potential comes in au/A, and needs to be converted to au/Bohrs.
+   do i = 1, qmmm_struct%nquant_nlink
+      ks_struct%shift(i) = ks_struct%shift(i) - aspot(i)
+   end do
 
+   return
+end subroutine qm2_dftb_aspot_shift
diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/qm2_get_qmmm_forces.F90 sqm/qm2_get_qmmm_forces.F90
--- sqm-orig/qm2_get_qmmm_forces.F90	2017-07-14 16:11:14.738724115 -0500
+++ sqm/qm2_get_qmmm_forces.F90	2017-10-13 01:25:22.613510627 -0500
@@ -1,7 +1,7 @@
 ! <compile=optimized>
 #include "copyright.h"
 #include "../include/dprec.fh"
-subroutine qm2_get_qmmm_forces(dxyzqm,qm_xcrd,dxyzmm,scf_mchg)
+subroutine qm2_get_qmmm_forces(dxyzqm,qm_xcrd,dxyzmm,scf_mchg,mm_esp)
 
 ! This routine calculates force on the MM atoms due to the QM atoms
 ! and vice versa. The forces are added to dxyzmm and dxyzqm respectively.
@@ -41,6 +41,7 @@
       _REAL_ , intent(in) :: qm_xcrd(4,qmmm_struct%qm_mm_pairs)
       _REAL_ , intent(out) :: dxyzmm(*)
       _REAL_ , intent(in) :: scf_mchg(*)
+      _REAL_ , intent(out) :: mm_esp(*)
 
 !Local
       _REAL_ psum(45), psum_light
@@ -149,23 +150,30 @@
               
               end do  !k
   
+              ! electrostatic potential
+              H=0.0D0
+              temp(1:3)=qm_xcrd(1:3,j)-qm_atom_coord(1:3)
+              r2=sum( temp(1:3) **2)
+              rij=sqrt(r2)
+              rijInAu=rij*A_TO_BOHRS
+              oneOverRij=one/rij
+              r2InAu=r2*A2_TO_BOHRS2
+              call GetRotationMatrix(temp(1:3), rotationMatrix, spd_atom)
+              call qm2_repp_d(qmmm_struct%qm_atom_type(jj),0,rijInAu,RI,CORE,W,45,1,0)
+              call RotateCore(1,0, n_atomic_orb,0,1, 0            &
+                  ,core,rotationMatrix,H)
+ 
+              AA=- core(1,1)*qm_atom_core
+              scale=SIGN(1.0D0,qm_xcrd(4,j))*(AA*exp(-qm2_params%cc_exp_params(jj)*RIJ)+EXP(-ALPH_MM*RIJ))
+              AA=qm2_HELECT(8, psum, H, H)+AA+scale
+
+              ! electrostatic potential at MM atom positions
+              mm_esp(j) = mm_esp(j) + AA * EV_TO_KCAL
+
+              ! electrostatic energy
+              AA = AA * qm_xcrd(4,j)
+
               if ( qmmm_nml%qmmm_switch ) then
-                 H=0.0D0
-                 temp(1:3)=qm_xcrd(1:3,j)-qm_atom_coord(1:3)
-                 r2=sum( temp(1:3) **2) 
-                 rij=sqrt(r2)
-                 rijInAu=rij*A_TO_BOHRS
-                 oneOverRij=one/rij
-                 r2InAu=r2*A2_TO_BOHRS2
-                 call GetRotationMatrix(temp(1:3), rotationMatrix, spd_atom)   
-                 call qm2_repp_d(qmmm_struct%qm_atom_type(jj),0,rijInAu,RI,CORE,W,45,1,0) 
-                 core=core*qm_xcrd(4,j)
-                 call RotateCore(1,0, n_atomic_orb,0,1, 0            &
-                     ,core,rotationMatrix,H)
-                      
-                 AA=- core(1,1)*qm_atom_core
-                 scale=abs(AA*exp(-qm2_params%cc_exp_params(jj)*RIJ)+EXP(-ALPH_MM*RIJ))
-                 AA=qm2_HELECT(8, psum, H, H)+AA+scale
 
                  ! switch function
                  if (rij <= qmmm_nml%r_switch_lo) then
@@ -226,7 +234,7 @@
 !             directions for the interaction of the current QM-MM pair.
               call qm2_deriv_qmmm_heavy(jj,loop_count, &
                                   psum,qm_atom_coord,qm_xcrd(1,ii),n_atomic_orb, &
-                                  pair_force,qm_atom_core,qm_atom_alpa,scf_mchg(jj))
+                                  pair_force,qm_atom_core,qm_atom_alpa,scf_mchg(jj),mm_esp(ii))
   
               dxyzmm(inner_loop_count) = dxyzmm(inner_loop_count) - pair_force(1)
               dxyzmm(inner_loop_count+1) = dxyzmm(inner_loop_count+1) - pair_force(2)
@@ -244,7 +252,7 @@
            do ii=1,qmmm_struct%qm_mm_pairs
               loop_count=loop_count+1
               call qm2_deriv_qmmm_light(jj,ii,loop_count,psum_light,qm_atom_coord,qm_xcrd(1,ii), &
-                                        pair_force,qm_atom_core,qm_atom_alpa,scf_mchg(jj))
+                                        pair_force,qm_atom_core,qm_atom_alpa,scf_mchg(jj),mm_esp(ii))
               dxyzmm(inner_loop_count:inner_loop_count+2) = &
                 dxyzmm(inner_loop_count:inner_loop_count+2) - pair_force(1:3)
               fqm(1:3) = fqm(1:3) + pair_force(1:3)
@@ -309,7 +317,7 @@
 end subroutine qm2_get_qmmm_forces
 
 subroutine qm2_deriv_qmmm_light(iqm,jpair,loop_count,psum_light,xyz_qm,xyz_mm,pair_force, &
-                         qm_atom_core,alpa,qm_charge)
+                         qm_atom_core,alpa,qm_charge,mm_esp)
 !For light atoms
 !See heavy version of routine for comments
 !  Current Version: Ross Walker (TSRI, 2005)
@@ -328,6 +336,7 @@
       integer, intent(in) :: iqm, loop_count, jpair
       _REAL_, intent(in) ::  qm_atom_core, alpa
       _REAL_, intent(in) :: qm_charge
+      _REAL_, intent(out) :: mm_esp
 
 !Local
       _REAL_ FABX, FABY, FABZ ,FNUCX, FNUCY, FNUCZ
@@ -437,8 +446,8 @@
 
       C1=qm_atom_core*mm_charge
 
-      ENUC = qmmm_erep*C1
-      scale= ABS((EXP1+EXP2)*ENUC)
+      ENUC = qmmm_erep*qm_atom_core
+      scale= SIGN(1.0D0, mm_charge)*(EXP1+EXP2)*ENUC
 
 !     ****   START OF THE AM1 and PM3 RM1 etc SPECIFIC DERIVATIVE CODE   ***
 !     ANALYT=-A*(1/(R*R)+2.D0*B*(R-C)/R)*EXP(-B*(R-C)**2)
@@ -454,7 +463,7 @@
           if (temp_real2 < EXPONENTIAL_CUTOFF) then!Skip doing the exponential if it is essentially zero
             ANAM1=ANAM1+qm2_params%FN1(i,qmitype)* &
                  (oner2+two*qm2_params%FN2(i,qmitype)*temp_real*oneRIJ)*EXP(-temp_real2)
-            scale=scale+qm2_params%FN1(i,qmitype)*EXP(-temp_real2)*C1*oneRIJ
+            scale=scale+qm2_params%FN1(i,qmitype)*EXP(-temp_real2)*qm_atom_core*oneRIJ
           end if
         end do
         ANAM1=-ANAM1*c1*onerij
@@ -489,6 +498,15 @@
       pair_force(2) = (FABY+FNUCY)*EV_TO_KCAL 
       pair_force(3) = (FABZ+FNUCZ)*EV_TO_KCAL 
 
+      ! electrostatic potential in EV
+      ELEC = ENUC - qmmm_erep*psum_light
+      ! converts EV to kcal
+      ELEC = ELEC * EV_TO_KCAL
+      ! electrostatic potential at MM atom positions
+      mm_esp = mm_esp + ELEC
+      ! electrostatic energy
+      ELEC = ELEC * xyz_mm(4)
+
       if (qmmm_nml%qmmm_switch) then
          if (rij <= qmmm_nml%r_switch_lo) then
             f_switch = one
@@ -501,11 +519,6 @@
             df_switch= zero
          end if
 
-         ! electronic energy in EV
-         ELEC = -xyz_mm(4)*qmmm_erep*psum_light + ENUC
-         ! converts EV to kcal
-         ELEC = ELEC * EV_TO_KCAL
-
          AA = ELEC * oneRIJ * df_switch
          pair_force(1) = pair_force(1)*f_switch + vec_qm_mm1*AA
          pair_force(2) = pair_force(2)*f_switch + vec_qm_mm2*AA
@@ -530,7 +543,7 @@
 end subroutine qm2_deriv_qmmm_light
 
 subroutine qm2_deriv_qmmm_heavy(iqm,loop_count,psum,xyz_qm,xyz_mm,n_atomic_orb,pair_force, &
-                         qm_atom_core,alpa,qm_charge)
+                         qm_atom_core,alpa,qm_charge,mm_esp)
 
 !     This routine computes the analytical energy derivatives for the QM-MM
 !     interaction energy arising from a single QM-MM pair.  The contibutions
@@ -564,6 +577,7 @@
       integer, intent(in) :: iqm, loop_count, n_atomic_orb
       _REAL_, intent(in) ::  qm_atom_core, alpa
       _REAL_, intent(in) :: qm_charge
+      _REAL_, intent(out) :: mm_esp
 
 !Local
       _REAL_ FABX, FABY, FABZ ,FNUCX, FNUCY, FNUCZ
@@ -936,7 +950,7 @@
 
       C1=qm_atom_core*mm_charge
 
-      ENUC = qm_mm_e_repul(1)*C1
+      ENUC = qm_mm_e_repul(1)*qm_atom_core
       ENUC = ENUC + ENUC*SIGN(1.0D0,mm_charge)*(-exp(-RIJ*sf1) + exp(-RIJ*sf2))
 
       FNUCx = dgx(1)*C1
@@ -960,8 +974,8 @@
 
       C1=qm_atom_core*mm_charge
 
-      ENUC = qm_mm_e_repul(1)*C1
-      scale= ABS((EXP1+EXP2)*ENUC)
+      ENUC = qm_mm_e_repul(1)*qm_atom_core
+      scale= SIGN(1.0D0, mm_charge)*(EXP1+EXP2)*ENUC
 
 !     ****   START OF THE AM1 and PM3 SPECIFIC DERIVATIVE CODE   ***
 !     ANALYT=-A*(1/(R*R)+2.D0*B*(R-C)/R)*EXP(-B*(R-C)**2)
@@ -977,7 +991,7 @@
           if (temp_real2 < EXPONENTIAL_CUTOFF) then!Skip doing the exponential if it is essentially zero
             ANAM1=ANAM1+qm2_params%FN1(i,qmitype)* &
                  (oner2+two*qm2_params%FN2(i,qmitype)*temp_real*oneRIJ)*EXP(-temp_real2)
-            scale=scale+qm2_params%FN1(i,qmitype)*EXP(-temp_real2)*C1*oneRIJ
+            scale=scale+qm2_params%FN1(i,qmitype)*EXP(-temp_real2)*qm_atom_core*oneRIJ
           end if
         end do
         ANAM1=-ANAM1*c1*onerij
@@ -1030,6 +1044,31 @@
       pair_force(2) = (FABY+FNUCY)*EV_TO_KCAL                                           
       pair_force(3) = (FABZ+FNUCZ)*EV_TO_KCAL                                           
 
+      E1B(1) = -qm_mm_e_repul(1)
+
+      CHGMM_RI2 = -qm_mm_e_repul(2)
+      CHGMM_RI3 = -qm_mm_e_repul(3)
+      CHGMM_RI4 = -qm_mm_e_repul(4)
+
+      E1B(2) = CHGMM_RI2*TX(1)
+      E1B(3) = CHGMM_RI3*TX(1)*TX(1)+CHGMM_RI4*((TY(1)*TY(1))+(TZ(1)*TZ(1)))
+      E1B(4) = CHGMM_RI2*TX(2)
+      E1B(5) = CHGMM_RI3*TX(2)*TX(1)+CHGMM_RI4*((TY(2)*TY(1))+(TZ(2)*TZ(1)))
+      E1B(6) = CHGMM_RI3*TX(2)*TX(2)+CHGMM_RI4*((TY(2)*TY(2))+(TZ(2)*TZ(2)))
+      E1B(7) = CHGMM_RI2*TX(3)
+      E1B(8) = CHGMM_RI3*TX(3)*TX(1)+CHGMM_RI4*TZ(3)*TZ(1)
+      E1B(9) = CHGMM_RI3*TX(3)*TX(2)+CHGMM_RI4*TZ(3)*TZ(2)
+      E1B(10)= CHGMM_RI3*TX(3)*TX(3)+CHGMM_RI4*TZ(3)*TZ(3)
+
+      ! electrostatic potential in EV
+      ELEC = qm2_HELECT(3, psum, E1B, E1B) + ENUC
+      ! converts EV to kcal
+      ELEC = ELEC * EV_TO_KCAL
+      ! electrostatic potential at MM atom positions
+      mm_esp = mm_esp + ELEC
+      ! electrostatic energy
+      ELEC = ELEC * mm_charge
+
       if (qmmm_nml%qmmm_switch) then
          if (rij <= qmmm_nml%r_switch_lo) then  ! qtw
             f_switch = one
@@ -1042,28 +1081,6 @@
             df_switch= zero
          end if
 
-         ! Calculate energy
-         E1B(1) = -mm_charge*qm_mm_e_repul(1)
-
-         CHGMM_RI2 = -mm_charge*qm_mm_e_repul(2)
-         CHGMM_RI3 = -mm_charge*qm_mm_e_repul(3)
-         CHGMM_RI4 = -mm_charge*qm_mm_e_repul(4)
-
-         E1B(2) = CHGMM_RI2*TX(1)
-         E1B(3) = CHGMM_RI3*TX(1)*TX(1)+CHGMM_RI4*((TY(1)*TY(1))+(TZ(1)*TZ(1)))
-         E1B(4) = CHGMM_RI2*TX(2)
-         E1B(5) = CHGMM_RI3*TX(2)*TX(1)+CHGMM_RI4*((TY(2)*TY(1))+(TZ(2)*TZ(1)))
-         E1B(6) = CHGMM_RI3*TX(2)*TX(2)+CHGMM_RI4*((TY(2)*TY(2))+(TZ(2)*TZ(2)))
-         E1B(7) = CHGMM_RI2*TX(3)
-         E1B(8) = CHGMM_RI3*TX(3)*TX(1)+CHGMM_RI4*TZ(3)*TZ(1)
-         E1B(9) = CHGMM_RI3*TX(3)*TX(2)+CHGMM_RI4*TZ(3)*TZ(2)
-         E1B(10)= CHGMM_RI3*TX(3)*TX(3)+CHGMM_RI4*TZ(3)*TZ(3)
-
-         ! electronic energy in EV
-         ELEC = qm2_HELECT(3, psum, E1B, E1B) + ENUC
-         ! converts EV to kcal
-         ELEC = ELEC * EV_TO_KCAL
-
          AA = ELEC * oneRIJ * df_switch
          pair_force(1) = pair_force(1)*f_switch + vec_qm_mm1*AA
          pair_force(2) = pair_force(2)*f_switch + vec_qm_mm2*AA
diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/qm2_read_nm_and_alloc.F90 sqm/qm2_read_nm_and_alloc.F90
--- sqm-orig/qm2_read_nm_and_alloc.F90	2017-07-14 16:11:15.741724784 -0500
+++ sqm/qm2_read_nm_and_alloc.F90	2017-07-14 14:21:06.570274797 -0500
@@ -27,7 +27,7 @@
 !+ Reads the qmmm namelist and calls the qmmm memory allocation routines
 #ifdef SQM
 subroutine read_qmmm_nm_and_alloc( natom_inout, igb, atnum, maxcyc, &
-            grms_tol, ntpr, ncharge_in, excharge, chgatnum )
+            grms_tol, ntpr, ncharge_in, excharge, chgatnum, aspot )
 #else
 subroutine read_qmmm_nm_and_alloc( igb, ih, ix, x, cut, use_pme, ntb, qmstep, &
             isabfqm, abfqmcharge, read_file, options)
@@ -64,6 +64,7 @@
    _REAL_, intent(in) :: excharge(*)
    integer, intent(in) :: chgatnum(*)
    integer, intent(in) :: ncharge_in
+   _REAL_, intent(in) :: aspot(*)
 #else
    character(len=4) ih(*)
    integer, intent(in) :: ix(*)
@@ -1453,6 +1454,7 @@
    !qmmm_nml%iqmatoms(1:natom) = iqmatoms(1:natom)
    qmmm_struct%iqm_atomic_numbers(1:qmmm_struct%nquant_nlink) = atnum(1:qmmm_struct%nquant_nlink)
    qmmm_nml%iqmatoms(1:qmmm_struct%nquant_nlink) = iqmatoms(1:qmmm_struct%nquant_nlink)
+   qmmm_struct%aspot(1:qmmm_struct%nquant_nlink) = aspot(1:qmmm_struct%nquant_nlink)
    if (ncharge_in > 0) then
       qmmm_struct%qm_xcrd = 0.0D0
       j=0
diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/qm2_scf.F90 sqm/qm2_scf.F90
--- sqm-orig/qm2_scf.F90	2017-07-14 16:11:16.077725096 -0500
+++ sqm/qm2_scf.F90	2017-07-19 16:09:47.259872769 -0500
@@ -1744,6 +1744,9 @@
      call timer_stop(TIME_QMMMENERGYSCFFOCKEWALD)
 
   end if
+#else
+  ! Add atom site potentials
+  call aspot_add_fock(fock_matrix, qmmm_struct%aspot)
 #endif
 
   !End step 3
@@ -2305,3 +2308,32 @@
   CALL DGEMM( "N","N",N,N,N, 1.d0,  U,N,  VT,N,  0.d0,  ainv,N )
   
 END SUBROUTINE SvdInvert_SymMat
+
+subroutine aspot_add_fock(fock_matrix, aspot)
+
+  use qmmm_module, only : qmmm_struct, qm2_params
+  use constants, only : AU_TO_EV
+  implicit none
+
+!Passed in
+  _REAL_, intent(in) :: aspot(*) !Potential at each QM atom
+  _REAL_, intent(inout) :: fock_matrix(*) !Fock matrix
+
+!Local
+  _REAL_ :: temp_pot
+  integer :: i, ia, ib, i1, i2
+
+  !Now add the ASPOT array contributions to the diagonal elements of the fock matrix
+  do i = 1, qmmm_struct%nquant_nlink
+    IA = qm2_params%orb_loc(1,I)
+    IB = qm2_params%orb_loc(2,I)
+    temp_pot = aspot(i)*AU_TO_EV
+    do i1 = IA,IB
+       i2 = qm2_params%pascal_tri2(i1)
+       fock_matrix(i2) = fock_matrix(i2) - temp_pot
+    end do
+  end do 
+
+  return
+
+end subroutine aspot_add_fock
diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/qmmm_struct_module.F90 sqm/qmmm_struct_module.F90
--- sqm-orig/qmmm_struct_module.F90	2017-07-14 16:11:16.531725518 -0500
+++ sqm/qmmm_struct_module.F90	2017-10-10 16:18:13.314875029 -0500
@@ -86,6 +86,12 @@
      ! Switched electrostatic potential at each QM atom site due to MM atoms within cutoff
      _REAL_, dimension(:), pointer :: switched_mmpot => null()
 
+     ! Electrostatic potential at MM atoms from QM atoms
+     _REAL_, dimension(:), pointer :: mm_esp => null()
+
+     ! Atom site potential at QM atoms
+     _REAL_, dimension(:), pointer :: aspot => null()
+
      ! Total number of atoms
      integer :: natom
      
@@ -347,6 +353,19 @@
        REQUIRE(ier == 0) !Deallocated in deallocate qmmm
     end if
 
+    if (qmmm_int /= 0) then
+       if ( .not. associated ( self%mm_esp ) ) then
+          ! mm_esp array only actually needs to be qm_mm_pairs long..
+          allocate ( self%mm_esp(natom), stat=ier )
+          REQUIRE(ier == 0)
+       end if
+    end if
+
+    if ( .not. associated (self%aspot ) ) then
+       allocate (self%aspot(natom), stat=ier )
+       REQUIRE(ier == 0)
+    end if
+
   end subroutine new_qmmm_struct_type
 
   subroutine extend_integer_array(iarr, new_size)
@@ -499,6 +518,18 @@
 
     end if
 
+    if (qmmm_int /= 0) then
+       if ( associated ( self%mm_esp ) ) then
+          deallocate ( self%mm_esp, stat=ier )
+          REQUIRE(ier == 0)
+       end if
+    end if
+
+    if ( associated (self%aspot ) ) then
+       deallocate (self%aspot, stat=ier )
+       REQUIRE(ier == 0)
+    end if
+
   end subroutine delete_qmmm_struct_type
 
 
diff -Naur '--exclude=*.o' '--exclude=*.mod' sqm-orig/sqm.F90 sqm/sqm.F90
--- sqm-orig/sqm.F90	2017-07-14 16:11:16.698725673 -0500
+++ sqm/sqm.F90	2017-10-11 16:18:31.897439254 -0500
@@ -31,10 +31,12 @@
    character owrite
    character(len=MAX_FN_LEN) mdin, mdout 
    ! external charge
-   _REAL_ excharge(4000)
-   integer chgatnum(1000)
-   character(len=8) chgnam(1000)
+   _REAL_ excharge(12000)
+   integer chgatnum(3000)
+   character(len=8) chgnam(3000)
    integer ncharge
+   ! atom site potential
+   _REAL_ aspot(1000)
 
    integer :: igb, maxcyc
    _REAL_  :: grms_tol
@@ -116,9 +118,9 @@
    write(6,*) '           --------------------------------------------------------'
    write(6,*) ''                  
 
-   call getsqmx( natom, x, atnam, atnum, ncharge, excharge, chgnam, chgatnum )
+   call getsqmx( natom, x, atnam, atnum, ncharge, excharge, chgnam, chgatnum, aspot )
    call read_qmmm_nm_and_alloc(natom,igb,atnum,maxcyc,grms_tol,ntpr, &
-                               ncharge,excharge,chgatnum )
+                               ncharge,excharge,chgatnum,aspot )
    call qm_assign_atom_types
 
    ! Set default QMMM MPI parameters - for single cpu operation.
@@ -395,7 +397,7 @@
    ! Calculation of QM Forces
    !=============================
 
-   use qmmm_module, only : qmmm_nml, qmmm_struct, qmmm_mpi
+   use qmmm_module, only : qmmm_nml, qmmm_struct, qmmm_mpi, qm2_struct, qmmm_scratch
    use constants, only : zero
   
   implicit none
@@ -403,7 +405,7 @@
   integer, intent(in) :: natom
   _REAL_ , intent(out) :: forces(natom*3)
 
-  integer :: i, j, m
+  integer :: i, j, m, iqmp
 
   qmmm_struct%dxyzqm=zero
    if (qmmm_nml%qmtheory%DFTB) then
@@ -422,6 +424,24 @@
      forces(m+3) = qmmm_struct%dxyzqm(3,i)
    enddo
 
+
+   !Calculate forces between QM and MM atoms
+   if (qmmm_nml%qmmm_int > 0 .and. (qmmm_nml%qmmm_int /= 5) ) then
+     qmmm_struct%dxyzcl=zero
+     qmmm_struct%mm_esp=zero
+     if (qmmm_nml%qmtheory%DFTB) then
+       iqmp = qmmm_struct%qm_mm_pairs
+       call qm2_dftb_get_qmmm_forces(qmmm_struct%dxyzcl, &
+              qmmm_struct%dxyzqm, qmmm_scratch%qm_real_scratch, &
+              qmmm_scratch%qm_real_scratch(natom+1:natom+iqmp), &
+              qmmm_scratch%qm_real_scratch(2*natom+1:2*natom+iqmp), &
+              qmmm_scratch%qm_real_scratch(3*natom+1:3*natom+iqmp))
+     else
+       call qm2_get_qmmm_forces(qmmm_struct%dxyzqm, qmmm_struct%qm_xcrd, &
+                                qmmm_struct%dxyzcl, qm2_struct%scf_mchg, qmmm_struct%mm_esp)
+     end if
+   end if
+
    if (qmmm_mpi%commqmmm_master .AND. qmmm_nml%verbosity > 3) then
       
       !If verbosity level is greater than 3 we also print the force array on the QM atoms
@@ -429,6 +449,11 @@
       write (6,'("QMMM: Forces on QM atoms from SCF calculation")')
       write (6,'("QMMM: Atm ",i6,": ",3f20.14)') (j,qmmm_struct%dxyzqm(1,j), qmmm_struct%dxyzqm(2,j), &
            qmmm_struct%dxyzqm(3,j), j=1,qmmm_struct%nquant_nlink)
+      if (qmmm_nml%qmmm_int > 0 .and. (qmmm_nml%qmmm_int /= 5) ) then
+         write (6,'("QMMM: Forces on MM atoms from SCF calculation")')
+         write (6,'("QMMM: Atm ",i6,": ",3f20.14)') (j,qmmm_struct%dxyzcl(1,j), qmmm_struct%dxyzcl(2,j), &
+              qmmm_struct%dxyzcl(3,j), j=1,qmmm_struct%natom-qmmm_struct%nquant)
+      end if
       if (qmmm_nml%verbosity > 4) then
          !Also print info in KJ/mol
          write (6,'("QMMM:")')
@@ -437,6 +462,10 @@
               qmmm_struct%dxyzqm(2,j)*4.184d0, qmmm_struct%dxyzqm(3,j)*4.184d0, &
               j=1,qmmm_struct%nquant_nlink)
       end if
+      if (qmmm_nml%qmmm_int > 0 .and. (qmmm_nml%qmmm_int /= 5) ) then
+         write (6,'("QMMM: Electrostatic Potential on MM atoms from QM Atoms")')
+         write (6,'("QMMM: Atm ",i6,": ",f20.14)') (j,qmmm_struct%mm_esp(j), j=1,qmmm_struct%natom-qmmm_struct%nquant)
+      end if
    end if
 
 end subroutine sqm_forces
@@ -509,7 +538,7 @@
 end subroutine sander_bomb
 !-------------------------------------------------
 
-subroutine getsqmx(natom,x,atnam,atnum,ncharge,excharge,chgnam,chgatnum)
+subroutine getsqmx(natom,x,atnam,atnum,ncharge,excharge,chgnam,chgatnum,aspot)
    
    !     --- reads initial coords,
 
@@ -518,7 +547,7 @@
    integer i,i3,lun
    integer natom,atnum(*)
    character(len=8) atnam(*)
-   character(len=80) line
+   character(len=100) line
    ! test-local
    _REAL_ excharge(*)
    integer chgatnum(*)
@@ -527,16 +556,20 @@
    integer ia, ic, ihead, iend
    logical mdin_qm_atom
    logical mdin_external_charge
+   ! atom site potential
+   _REAL_ aspot(*)
+   logical mdin_atom_site_potential
 
    lun = 5 
    mdin_qm_atom = .false.
    mdin_external_charge = .false.
+   mdin_atom_site_potential = .false.
    ncharge = 0
 
    ! check header names
    ihead=0
    iend=0
-   do i=1,999
+   do i=1,3999
       read(lun,'(a)',end=10) line
       if (line(1:1) == "#") then
          if (line(1:80) == "#EXCHARGES") then
@@ -545,6 +578,8 @@
             !write(0,*) 'Header "#EXCHARGES" found'
          else if (line(1:80) == "#END") then
             iend = iend + 1
+         else if (line(1:80) == "#ATOM_SITE_POTENTIAL") then
+            mdin_atom_site_potential = .true.
          else
             write(0,*) 'Unrecognized header name'
             write(0,*) line(1:80)
@@ -574,7 +609,7 @@
    do i=1,999
       read(lun,'(a)',end=12) line
       if (line(1:80) /= "") then
-         if (line(1:80) /= "#EXCHARGES") then
+         if (line(1:80) /= "#EXCHARGES" .and. line(1:80) /= "#ATOM_SITE_POTENTIAL") then
             ia = ia + 1
             read(line,*,err=15) atnum(ia),atnam(ia),x(i3+1),x(i3+2),x(i3+3)
             i3 = i3 + 3
@@ -591,7 +626,7 @@
    if (mdin_external_charge) then
       i3=0
       ic=0
-      do i=1,999
+      do i=1,2999
          read(lun,'(a)',end=14) line
          if (line(1:80) /= "") then
             if (line(1:80) /= "#END") then
@@ -616,6 +651,37 @@
       end do
    end if
 
+   rewind(lun)
+
+   ! reading atom site potential
+   if (mdin_atom_site_potential) then
+      do i=1,3999
+         read(lun,'(a)') line
+         if (line(1:80) == "#ATOM_SITE_POTENTIAL") then
+             exit
+         end if
+      end do
+
+      write(6,'(/80(1H-)/''  ATOM SITE POTENTIALS FOUND IN INPUT'',/80(1H-))')
+      write(6,'(2x,"QMMM: Atom Site Potential Info")')
+      write(6,'(2x,"QMMM:",4x,"ASPOT")')
+
+      do i=1,natom
+         read(lun,'(a)') line
+         if (line(1:80) /= "#END") then
+            read(line,*,err=17) aspot(i)
+            write(6,'(2x,"QMMM:",f10.4)') aspot(i)
+         else
+            go to 18
+         end if
+      end do
+
+      read(lun,'(a)', end=14) line
+      if (line(1:80) /= "#END") then
+         go to 18
+      end if
+   end if
+
    return
 
    14 write(0,*) 'The termination sign "#END" is missing'
@@ -627,6 +693,12 @@
    16 write(0,*) 'Error in reading external charges'
    call mexit(6,1)
 
+   17 write(0,*) 'Error in reading atom site potentials'
+   call mexit(6,1)
+
+   18 write(0,*) 'Numbers of QM atoms and atom site potentials do not match'
+   call mexit(6,1)
+
 end subroutine getsqmx 
 
 !  following stub routine to avoid changing qmmm_module.f for sqm:
